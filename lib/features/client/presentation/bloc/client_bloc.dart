import 'package:flutter_bloc/flutter_bloc.dart';

import '../../domain/entities/client.dart';
import '../../domain/usecases/add_client.dart';
import '../../domain/usecases/delete_client.dart';
import '../../domain/usecases/get_clients.dart';
import '../../domain/usecases/search_clients.dart';
import '../../domain/usecases/update_client.dart';

// Events
abstract class ClientEvent {}

class AddClientEvent extends ClientEvent {
  final String name;
  final String mobileNumber;
  final String businessType;

  AddClientEvent({
    required this.name,
    required this.mobileNumber,
    required this.businessType,
  });
}

class UpdateClientEvent extends ClientEvent {
  final Client client;

  UpdateClientEvent({required this.client});
}

class DeleteClientEvent extends ClientEvent {
  final String clientId;

  DeleteClientEvent({required this.clientId});
}

class LoadClientsEvent extends ClientEvent {}

class SearchClientsEvent extends ClientEvent {
  final String query;

  SearchClientsEvent({required this.query});
}

// States
abstract class ClientState {}

class ClientInitial extends ClientState {}

class ClientLoading extends ClientState {}

class ClientSuccess extends ClientState {
  final String message;
  ClientSuccess(this.message);
}

class ClientError extends ClientState {
  final String message;
  ClientError(this.message);
}

class ClientsLoaded extends ClientState {
  final List<Client> clients;
  ClientsLoaded(this.clients);
}

/// Bloc for managing client operations
class ClientBloc extends Bloc<ClientEvent, ClientState> {
  final AddClient addClient;
  final UpdateClient updateClient;
  final DeleteClient deleteClient;
  final GetClients getClients;
  final SearchClients searchClients;

  ClientBloc({
    required this.addClient,
    required this.updateClient,
    required this.deleteClient,
    required this.getClients,
    required this.searchClients,
  }) : super(ClientInitial()) {
    on<AddClientEvent>(_onAddClient);
    on<UpdateClientEvent>(_onUpdateClient);
    on<DeleteClientEvent>(_onDeleteClient);
    on<LoadClientsEvent>(_onLoadClients);
    on<SearchClientsEvent>(_onSearchClients);
  }

  Future<void> _onAddClient(
    AddClientEvent event,
    Emitter<ClientState> emit,
  ) async {
    emit(ClientLoading());

    try {
      // Create a new client with current timestamp
      final now = DateTime.now();
      final client = Client(
        id: '', // Will be generated by Firestore
        name: event.name,
        mobileNumber: event.mobileNumber,
        businessType: event.businessType,
        createdAt: now,
        updatedAt: now,
      );

      final clientId = await addClient(client);
      emit(ClientSuccess('Client added successfully with ID: $clientId'));
    } catch (e) {
      emit(ClientError('Failed to add client: $e'));
    }
  }

  Future<void> _onUpdateClient(
    UpdateClientEvent event,
    Emitter<ClientState> emit,
  ) async {
    emit(ClientLoading());

    try {
      // Update the client with current timestamp
      final updatedClient = event.client.copyWith(updatedAt: DateTime.now());

      await updateClient(updatedClient);
      emit(ClientSuccess('Client updated successfully'));
    } catch (e) {
      emit(ClientError('Failed to update client: $e'));
    }
  }

  Future<void> _onDeleteClient(
    DeleteClientEvent event,
    Emitter<ClientState> emit,
  ) async {
    emit(ClientLoading());

    try {
      await deleteClient(event.clientId);
      emit(ClientSuccess('Client deleted successfully'));
    } catch (e) {
      emit(ClientError('Failed to delete client: $e'));
    }
  }

  Future<void> _onLoadClients(
    LoadClientsEvent event,
    Emitter<ClientState> emit,
  ) async {
    emit(ClientLoading());

    try {
      final clients = await getClients();
      emit(ClientsLoaded(clients));
    } catch (e) {
      emit(ClientError('Failed to load clients: $e'));
    }
  }

  Future<void> _onSearchClients(
    SearchClientsEvent event,
    Emitter<ClientState> emit,
  ) async {
    emit(ClientLoading());

    try {
      final clients = await searchClients(event.query);
      emit(ClientsLoaded(clients));
    } catch (e) {
      emit(ClientError('Failed to search clients: $e'));
    }
  }
}
